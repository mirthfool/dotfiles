# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

config.set('content.cookies.accept', 'never')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{upstream_browser_version_short}`: The
# corresponding Safari/Chrome   version, but only with its major
# version. * `{qutebrowser_version}`: The currently running qutebrowser
# version.  The default value is equal to the default user agent of
# QtWebKit/QtWebEngine, but with the `QtWebEngine/...` part removed for
# increased compatibility.  Note that the value read from JavaScript is
# always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:136.0) Gecko/20100101 Firefox/139.0', 'https://accounts.google.com/*')

# Enable the ad/host blocker
# Type: Bool
c.content.blocking.enabled = True

# List of URLs to ABP-style adblocking rulesets.  Only used when Brave's
# ABP-style adblocker is used (see `content.blocking.method`).  You can
# find an overview of available lists here:
# https://adblockplus.org/en/subscriptions - note that the special
# `subscribe.adblockplus.org` links aren't handled by qutebrowser, you
# will instead need to find the link to the raw `.txt` file (e.g. by
# extracting it from the `location` parameter of the subscribe URL and
# URL-decoding it).
# Type: List of Url
c.content.blocking.adblock.lists = ['https://github.com/ewpratten/youtube_ad_blocklist/blob/master/blocklist.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/legacy.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2020.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2021.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2022.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2023.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2024.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badware.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/privacy.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badlists.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances-cookies.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances-others.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badlists.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/quick-fixes.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/resource-abuse.txt', 'https://github.com/uBlockOrigin/uAssets/raw/master/filters/unbreak.txt']


c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'g': 'https://www.google.com/search?udm=14&q={}'}

# Default zoom level.
# Type: Perc
c.zoom.default = '120%'

# Render all web contents using a dark theme. On QtWebEngine < 6.7, this
# setting requires a restart and does not support URL patterns, only the
# global setting is applied. Example configurations from Chromium's
# `chrome://flags`: - "With simple HSL/CIELAB/RGB-based inversion": Set
# `colors.webpage.darkmode.algorithm` accordingly, and   set
# `colors.webpage.darkmode.policy.images` to `never`.  - "With selective
# image inversion": qutebrowser default settings.
# Type: Bool
c.colors.webpage.darkmode.enabled = True
